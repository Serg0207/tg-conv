// src/pages/CharacterSelectionPage.tsx
// –ü–†–ò–ú–ï–† –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

import { useState, useEffect } from 'react';
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp';
import { useCharacterSelection } from '@/hooks/useCharacterSelection';
import type { Character } from '@/types/character';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
const MOCK_CHARACTERS: Character[] = [
  {
    id: '1',
    name: 'Anna',
    emoji: 'üë©‚Äçüíº',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ—É—á',
    age: 28,
    mood: '–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
    personality: 'professional',
    imageUrl: '/images/anna.jpg',
  },
  {
    id: '2',
    name: 'Kate',
    emoji: 'üé®',
    description: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫',
    age: 25,
    mood: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–∞—è',
    personality: 'creative',
    imageUrl: '/images/kate.jpg',
  },
  {
    id: '3',
    name: 'Sophie',
    emoji: 'ü§ó',
    description: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥',
    age: 30,
    mood: '–ó–∞–±–æ—Ç–ª–∏–≤–∞—è',
    personality: 'friendly',
    imageUrl: '/images/sophie.jpg',
  },
  {
    id: '4',
    name: 'Luna',
    emoji: 'üåô',
    description: '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥',
    age: 27,
    mood: '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è',
    personality: 'mysterious',
    imageUrl: '/images/luna.jpg',
    isPremium: true,
    price: 299,
  },
];

export function CharacterSelectionPage() {
  const [characters] = useState<Character[]>(MOCK_CHARACTERS);
  const [filter, setFilter] = useState<'all' | 'favorites'>('all');
  
  const {
    isReady,
    user,
    theme,
    hapticFeedback,
    setBackButton,
    setSettingsButton,
    showPopup,
  } = useTelegramWebApp();

  const {
    selectedCharacter,
    isLoading,
    selectCharacter,
    resetSelection,
    toggleFavorite,
    isFavorite,
    getFavoriteCharacters,
  } = useCharacterSelection();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  useEffect(() => {
    if (selectedCharacter) {
      setBackButton({
        isVisible: true,
        onClick: () => {
          hapticFeedback('light');
          resetSelection();
        },
      });
    } else {
      setBackButton({ isVisible: false });
    }
  }, [selectedCharacter, setBackButton, resetSelection, hapticFeedback]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    setSettingsButton({
      isVisible: true,
      onClick: async () => {
        hapticFeedback('light');
        const result = await showPopup({
          title: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
          message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
          buttons: [
            { id: 'favorites', type: 'default', text: '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ' },
            { id: 'all', type: 'default', text: 'üìã –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏' },
            { id: 'close', type: 'close' },
          ],
        });

        if (result === 'favorites') {
          setFilter('favorites');
        } else if (result === 'all') {
          setFilter('all');
        }
      },
    });
  }, [setSettingsButton, showPopup, hapticFeedback]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const handleCharacterClick = (character: Character) => {
    if (isLoading) return;

    hapticFeedback('medium');
    
    if (character.isPremium && !user?.isPremium) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      showPopup({
        title: '‚≠ê –ü—Ä–µ–º–∏—É–º –ø–µ—Ä—Å–æ–Ω–∞–∂',
        message: `${character.name} –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n–¶–µ–Ω–∞: ${character.price}‚ÇΩ`,
        buttons: [
          { id: 'buy', type: 'default', text: 'üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø' },
          { id: 'cancel', type: 'cancel' },
        ],
      }).then(result => {
        if (result === 'buy') {
          // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
          console.log('Opening payment for:', character.name);
        }
      });
    } else {
      selectCharacter(character);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleFavoriteClick = (characterId: string, event: React.MouseEvent) => {
    event.stopPropagation();
    toggleFavorite(characterId);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  const displayedCharacters = filter === 'favorites' 
    ? getFavoriteCharacters(characters)
    : characters;

  if (!isReady) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        backgroundColor: theme?.backgroundColor || '#ffffff',
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>‚è≥</div>
          <p style={{ color: theme?.textColor || '#000000' }}>
            –ó–∞–≥—Ä—É–∑–∫–∞...
          </p>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: theme?.backgroundColor || '#ffffff',
      padding: '16px',
      paddingBottom: '80px', // –û—Ç—Å—Ç—É–ø –¥–ª—è MainButton
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{
        marginBottom: '24px',
        textAlign: 'center',
      }}>
        <h1 style={{
          fontSize: '24px',
          fontWeight: 'bold',
          color: theme?.textColor || '#000000',
          marginBottom: '8px',
        }}>
          {user?.firstName ? `–ü—Ä–∏–≤–µ—Ç, ${user.firstName}! üëã` : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üé≠'}
        </h1>
        <p style={{
          fontSize: '14px',
          color: theme?.hintColor || '#999999',
        }}>
          {filter === 'favorites' 
            ? '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ ‚ù§Ô∏è'
            : '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞'
          }
        </p>
      </div>

      {/* –°–µ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '16px',
      }}>
        {displayedCharacters.map((character) => (
          <CharacterCard
            key={character.id}
            character={character}
            isSelected={selectedCharacter?.id === character.id}
            isFavorite={isFavorite(character.id)}
            onSelect={() => handleCharacterClick(character)}
            onFavoriteToggle={(e) => handleFavoriteClick(character.id, e)}
            theme={theme}
          />
        ))}
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö */}
      {filter === 'favorites' && displayedCharacters.length === 0 && (
        <div style={{
          textAlign: 'center',
          marginTop: '48px',
          color: theme?.hintColor || '#999999',
        }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>üíî</div>
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</p>
          <p style={{ fontSize: '12px', marginTop: '8px' }}>
            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ù§Ô∏è —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å
          </p>
        </div>
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function CharacterCard({
  character,
  isSelected,
  isFavorite,
  onSelect,
  onFavoriteToggle,
  theme,
}: {
  character: Character;
  isSelected: boolean;
  isFavorite: boolean;
  onSelect: () => void;
  onFavoriteToggle: (e: React.MouseEvent) => void;
  theme: any;
}) {
  return (
    <div
      onClick={onSelect}
      style={{
        position: 'relative',
        backgroundColor: isSelected 
          ? (theme?.buttonColor || '#FF6B6B') 
          : (theme?.secondaryBackgroundColor || '#f5f5f5'),
        borderRadius: '16px',
        padding: '16px',
        cursor: 'pointer',
        transition: 'all 0.3s ease',
        border: isSelected ? '2px solid ' + (theme?.buttonColor || '#FF6B6B') : '2px solid transparent',
        boxShadow: isSelected ? '0 4px 12px rgba(0, 0, 0, 0.15)' : 'none',
        transform: isSelected ? 'scale(1.05)' : 'scale(1)',
      }}
    >
      {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
      <div
        onClick={onFavoriteToggle}
        style={{
          position: 'absolute',
          top: '8px',
          right: '8px',
          fontSize: '20px',
          cursor: 'pointer',
          zIndex: 10,
        }}
      >
        {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
      </div>

      {/* Premium badge */}
      {character.isPremium && (
        <div style={{
          position: 'absolute',
          top: '8px',
          left: '8px',
          backgroundColor: '#FFD700',
          color: '#000',
          fontSize: '10px',
          fontWeight: 'bold',
          padding: '2px 8px',
          borderRadius: '8px',
        }}>
          ‚≠ê PREMIUM
        </div>
      )}

      {/* –ê–≤–∞—Ç–∞—Ä */}
      <div style={{
        fontSize: '64px',
        textAlign: 'center',
        marginTop: character.isPremium ? '24px' : '8px',
        marginBottom: '12px',
      }}>
        {character.emoji}
      </div>

      {/* –ò–º—è */}
      <h3 style={{
        fontSize: '18px',
        fontWeight: 'bold',
        color: isSelected ? '#ffffff' : (theme?.textColor || '#000000'),
        marginBottom: '4px',
        textAlign: 'center',
      }}>
        {character.name}
      </h3>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <p style={{
        fontSize: '12px',
        color: isSelected ? 'rgba(255, 255, 255, 0.8)' : (theme?.hintColor || '#999999'),
        textAlign: 'center',
        marginBottom: '8px',
        lineHeight: '1.4',
      }}>
        {character.description}
      </p>

      {/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ */}
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        gap: '8px',
        fontSize: '11px',
        color: isSelected ? 'rgba(255, 255, 255, 0.7)' : (theme?.hintColor || '#999999'),
      }}>
        <span>üë§ {character.age} –ª–µ—Ç</span>
        <span>‚Ä¢</span>
        <span>{character.mood}</span>
      </div>

      {/* –¶–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º */}
      {character.isPremium && character.price && (
        <div style={{
          marginTop: '8px',
          textAlign: 'center',
          fontSize: '12px',
          fontWeight: 'bold',
          color: isSelected ? '#ffffff' : (theme?.buttonColor || '#FF6B6B'),
        }}>
          {character.price}‚ÇΩ
        </div>
      )}
    </div>
  );
}

export default CharacterSelectionPage;
// src/pages/CharacterSelectionPage.tsx
// –°–æ–∑–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –ù–û–í–´–ô —Ñ–∞–π–ª

import { type FC } from 'react';
import { CharacterCard } from '@/components/characters/CharacterCard';
import { characters } from '@/data/characters';
import { useCharacterSelection } from '@/hooks/useCharacterSelection';
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp';
import './CharacterSelectionPage.css';

export const CharacterSelectionPage: FC = () => {
  const { selectedCharacter, isLoading, selectCharacter, confirmSelection } =
    useCharacterSelection();
  const { close, showAlert } = useTelegramWebApp();

  const handleConfirm = async () => {
    if (!selectedCharacter) {
      showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
      return;
    }

    const success = await confirmSelection();

    if (success) {
      showAlert(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selectedCharacter.name}! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ üí¨`);
      // –í dev —Ä–µ–∂–∏–º–µ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º, –≤ production –∑–∞–∫—Ä–æ–µ–º Mini App
      if (!import.meta.env.DEV) {
        setTimeout(() => close(), 1500);
      }
    } else {
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  };

  return (
    <div className="character-selection-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="character-selection-page__header">
        <h1 className="character-selection-page__title">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h1>
        <p className="character-selection-page__subtitle">
          –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è
        </p>
      </div>

      {/* –°–µ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */}
      <div className="character-selection-page__grid">
        {characters.map((character) => (
          <CharacterCard
            key={character.id}
            character={character}
            isSelected={selectedCharacter?.id === character.id}
            onSelect={selectCharacter}
            disabled={isLoading}
          />
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      {selectedCharacter && (
        <div className="character-selection-page__footer">
          <button
            className="character-selection-page__confirm-button"
            onClick={handleConfirm}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <span className="spinner"></span>
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </>
            ) : (
              <>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å {selectedCharacter.name}</>
            )}
          </button>
        </div>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {!selectedCharacter && (
        <div className="character-selection-page__hint">
          üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å
        </div>
      )}
    </div>
  );
};
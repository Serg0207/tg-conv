// src/hooks/useTelegramWebApp.ts
// –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è @tma.js/sdk-react v3.0.4

import { useEffect, useState, useCallback } from 'react';
import { 
  initData,
  miniApp,
  themeParams,
  viewport,
  backButton,
  mainButton,
  settingsButton,
  closingBehavior,
  swipeBehavior,
  cloudStorage,
  postEvent,
} from '@tma.js/sdk-react';

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp API
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å @tma.js/sdk-react v3.0.4
 */
export function useTelegramWebApp() {
  const [isReady, setIsReady] = useState(false);
  const [user, setUser] = useState<any>(undefined);
  const [theme, setTheme] = useState<any>(null);

  useEffect(() => {
    let isMounted = true;

    const initialize = async () => {
      try {
        console.log('üöÄ Initializing Telegram Mini App...');

        // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          const state = initData.state();
          if (state?.user && isMounted) {
            setUser(state.user);
            console.log('üë§ User data:', state.user);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Init data not available:', error);
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
        try {
          const currentTheme = themeParams.state();
          if (currentTheme && isMounted) {
            setTheme(currentTheme);
            console.log('üé® Theme loaded:', currentTheme);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Theme not available:', error);
        }

        // 3. –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
        try {
          miniApp.ready();
          console.log('‚úÖ App ready signal sent');
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not send ready signal:', error);
        }

        // 4. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        try {
          if (!viewport.state().isExpanded) {
            viewport.expand();
            console.log('üì± App expanded');
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not expand viewport:', error);
        }

        // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        try {
          const currentTheme = themeParams.state();
          if (currentTheme?.backgroundColor) {
            miniApp.setBgColor(currentTheme.backgroundColor);
          }
          if (currentTheme?.headerBgColor) {
            miniApp.setHeaderColor(currentTheme.headerBgColor);
          }
          console.log('üé® Theme colors applied');
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not set theme colors:', error);
        }

        // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        try {
          closingBehavior.enableConfirmation();
          console.log('üîí Closing confirmation enabled');
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not enable closing confirmation:', error);
        }

        // 7. –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        try {
          swipeBehavior.disableVerticalFp();
          console.log('üëÜ Vertical swipe disabled');
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not disable swipe:', error);
        }

        if (isMounted) {
          setIsReady(true);
          console.log('‚úÖ Telegram Mini App fully initialized');
        }
      } catch (error) {
        console.error('‚ùå Error initializing Telegram Mini App:', error);
        if (isMounted) {
          setIsReady(true); // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        }
      }
    };

    initialize();

    return () => {
      isMounted = false;
    };
  }, []);

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç–∞
   */
  const sendData = useCallback((data: Record<string, any>): boolean => {
    try {
      const dataString = JSON.stringify(data);
      console.log('üì§ Sending data to bot:', data);

      // –í dev —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
      if (import.meta.env.DEV) {
        console.log('üîß DEV mode: Data would be sent:', dataString);
        return true;
      }

      // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ postEvent
      postEvent('web_app_data_send', { data: dataString });
      return true;
    } catch (error) {
      console.error('‚ùå Error sending data:', error);
      return false;
    }
  }, []);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Ç–∏–≤–Ω—ã–π API)
   */
  const showAlert = useCallback(async (message: string): Promise<void> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π Telegram WebApp API
      if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
        (window as any).Telegram.WebApp.showAlert(message);
      } else {
        alert(message);
      }
    } catch (error) {
      console.error('Error showing alert:', error);
      alert(message);
    }
  }, []);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Ç–∏–≤–Ω—ã–π API)
   */
  const showConfirm = useCallback(async (message: string): Promise<boolean> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π Telegram WebApp API
      if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
        return new Promise((resolve) => {
          (window as any).Telegram.WebApp.showConfirm(message, (confirmed: boolean) => {
            resolve(confirmed);
          });
        });
      } else {
        return confirm(message);
      }
    } catch (error) {
      console.error('Error showing confirm:', error);
      return confirm(message);
    }
  }, []);

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å popup —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Ç–∏–≤–Ω—ã–π API)
   */
  const showPopup = useCallback(async (params: {
    title?: string;
    message: string;
    buttons?: Array<{
      id: string;
      type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';
      text?: string;
    }>;
  }): Promise<string> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π Telegram WebApp API
      if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.showPopup) {
        return new Promise((resolve) => {
          (window as any).Telegram.WebApp.showPopup(
            {
              title: params.title || '',
              message: params.message,
              buttons: params.buttons || [{ id: 'close', type: 'close' }],
            },
            (buttonId: string) => {
              resolve(buttonId);
            }
          );
        });
      } else {
        // Fallback –∫ confirm
        const confirmed = confirm(params.message);
        return confirmed ? 'ok' : 'cancel';
      }
    } catch (error) {
      console.error('Error showing popup:', error);
      return 'close';
    }
  }, []);

  /**
   * –ó–∞–∫—Ä—ã—Ç—å Mini App
   */
  const close = useCallback((): void => {
    try {
      miniApp.close();
    } catch (error) {
      console.log('Close not available:', error);
    }
  }, []);

  /**
   * –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–≤–∏–±—Ä–∞—Ü–∏—è)
   */
  const hapticFeedback = useCallback((
    type: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft' | 'success' | 'warning' | 'error' = 'medium'
  ): void => {
    try {
      switch (type) {
        case 'light':
        case 'medium':
        case 'heavy':
        case 'rigid':
        case 'soft':
          postEvent('web_app_trigger_haptic_feedback', { 
            type: 'impact' as const, 
            impact_style: type 
          });
          break;
        case 'success':
        case 'warning':
        case 'error':
          postEvent('web_app_trigger_haptic_feedback', { 
            type: 'notification' as const, 
            notification_type: type 
          });
          break;
      }
    } catch (error) {
      // Haptic feedback –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
    }
  }, []);

  /**
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
   */
  const setMainButton = useCallback((config: {
    text?: string;
    isVisible?: boolean;
    isEnabled?: boolean;
    isLoaderVisible?: boolean;
    color?: string;
    textColor?: string;
    hasShineEffect?: boolean;
    onClick?: () => void;
  }) => {
    try {
      const { 
        text, 
        isVisible, 
        isEnabled, 
        isLoaderVisible, 
        color, 
        textColor,
        hasShineEffect,
        onClick 
      } = config;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (text !== undefined) {
        mainButton.setText(text);
      }
      if (color !== undefined && color.startsWith('#')) {
        mainButton.setBgColor(color as `#${string}`);
      }
      if (textColor !== undefined && textColor.startsWith('#')) {
        mainButton.setTextColor(textColor as `#${string}`);
      }
      if (hasShineEffect !== undefined) {
        if (hasShineEffect) {
          mainButton.setParams({ hasShineEffect: true });
        } else {
          mainButton.setParams({ hasShineEffect: false });
        }
      }
      if (isLoaderVisible !== undefined) {
        if (isLoaderVisible) {
          mainButton.showLoader();
        } else {
          mainButton.hideLoader();
        }
      }
      if (isEnabled === false) {
        mainButton.disable();
      } else if (isEnabled === true) {
        mainButton.enable();
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      if (onClick !== undefined) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        mainButton.offClick(onClick);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        mainButton.onClick(onClick);
      }

      // –í–∏–¥–∏–º–æ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ
      if (isVisible === true) {
        mainButton.show();
      } else if (isVisible === false) {
        mainButton.hide();
      }

      console.log('‚úÖ Main button configured:', config);
    } catch (error) {
      console.error('Error setting main button:', error);
    }
  }, []);

  /**
   * –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
   */
  const hideMainButton = useCallback(() => {
    try {
      mainButton.hide();
    } catch (error) {
      console.error('Error hiding main button:', error);
    }
  }, []);

  /**
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
   */
  const setBackButton = useCallback((config: {
    isVisible: boolean;
    onClick?: () => void;
  }) => {
    try {
      if (config.onClick) {
        backButton.offClick(config.onClick);
        backButton.onClick(config.onClick);
      }

      if (config.isVisible) {
        backButton.show();
      } else {
        backButton.hide();
      }

      console.log('‚úÖ Back button configured:', config);
    } catch (error) {
      console.error('Error setting back button:', error);
    }
  }, []);

  /**
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  const setSettingsButton = useCallback((config: {
    isVisible: boolean;
    onClick?: () => void;
  }) => {
    try {
      if (config.onClick) {
        settingsButton.offClick(config.onClick);
        settingsButton.onClick(config.onClick);
      }

      if (config.isVisible) {
        settingsButton.show();
      } else {
        settingsButton.hide();
      }

      console.log('‚úÖ Settings button configured:', config);
    } catch (error) {
      console.error('Error setting settings button:', error);
    }
  }, []);

  /**
   * –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
   */
  const openLink = useCallback((url: string, options?: { tryInstantView?: boolean }) => {
    try {
      postEvent('web_app_open_link', { 
        url, 
        try_instant_view: options?.tryInstantView 
      });
    } catch (error) {
      console.error('Error opening link:', error);
      window.open(url, '_blank');
    }
  }, []);

  /**
   * –û—Ç–∫—Ä—ã—Ç—å Telegram —Å—Å—ã–ª–∫—É
   */
  const openTelegramLink = useCallback((url: string) => {
    try {
      postEvent('web_app_open_tg_link', { path_full: url.replace('https://t.me/', '') });
    } catch (error) {
      console.error('Error opening Telegram link:', error);
      window.open(url, '_blank');
    }
  }, []);

  /**
   * –†–∞–±–æ—Ç–∞ —Å Cloud Storage (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)
   */
  const saveToCloudStorage = useCallback(async (key: string, value: string): Promise<boolean> => {
    try {
      await cloudStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.error('Error saving to cloud storage:', error);
      return false;
    }
  }, []);

  const getFromCloudStorage = useCallback(async (key: string): Promise<string | null> => {
    try {
      const value = await cloudStorage.getItem(key);
      return value || null;
    } catch (error) {
      console.error('Error getting from cloud storage:', error);
      return null;
    }
  }, []);

  /**
   * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
   */
  const requestTheme = useCallback(() => {
    try {
      const currentTheme = themeParams.state();
      setTheme(currentTheme);
      return currentTheme;
    } catch (error) {
      console.error('Error requesting theme:', error);
      return null;
    }
  }, []);

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
   */
  const setBackgroundColor = useCallback((color: string) => {
    try {
      if (color.startsWith('#')) {
        miniApp.setBgColor(color as `#${string}`);
      }
    } catch (error) {
      console.error('Error setting background color:', error);
    }
  }, []);

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  const setHeaderColor = useCallback((color: string) => {
    try {
      if (color.startsWith('#')) {
        miniApp.setHeaderColor(color as `#${string}`);
      }
    } catch (error) {
      console.error('Error setting header color:', error);
    }
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isReady,
    user,
    theme,

    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    sendData,
    showAlert,
    showConfirm,
    showPopup,
    close,
    hapticFeedback,

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
    setMainButton,
    hideMainButton,
    setBackButton,
    setSettingsButton,

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    openLink,
    openTelegramLink,

    // –¢–µ–º–∞
    requestTheme,
    setBackgroundColor,
    setHeaderColor,

    // Cloud Storage
    saveToCloudStorage,
    getFromCloudStorage,
  };
}
// src/hooks/useCharacterSelection.ts
// –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - —Ç–æ–ª—å–∫–æ Telegram WebApp API

import { useState, useCallback, useEffect } from 'react';
import type { Character } from '@/types/character';
import { useTelegramWebApp } from './useTelegramWebApp';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram WebApp API
 */
export function useCharacterSelection() {
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [favoriteCharacters, setFavoriteCharacters] = useState<string[]>([]);
  
  const { 
    sendData, 
    hapticFeedback, 
    user,
    theme,
    setMainButton,
    hideMainButton,
    showPopup,
    showAlert,
    saveToCloudStorage,
    getFromCloudStorage,
  } = useTelegramWebApp();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ Cloud Storage
  useEffect(() => {
    const loadFavorites = async () => {
      try {
        const stored = await getFromCloudStorage('favorite_characters');
        if (stored) {
          const favorites = JSON.parse(stored);
          setFavoriteCharacters(favorites);
          console.log('‚úÖ Favorites loaded:', favorites);
        }
      } catch (error) {
        console.error('Error loading favorites:', error);
      }
    };
    loadFavorites();
  }, [getFromCloudStorage]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  useEffect(() => {
    if (selectedCharacter && !isLoading) {
      const buttonColor = theme?.buttonColor || '#FF6B6B';
      const buttonTextColor = theme?.buttonTextColor || '#FFFFFF';

      setMainButton({
        text: `–í—ã–±—Ä–∞—Ç—å ${selectedCharacter.name}`,
        isVisible: true,
        isEnabled: true,
        color: buttonColor,
        textColor: buttonTextColor,
        hasShineEffect: true,
        onClick: confirmSelection,
      });
    } else if (isLoading) {
      setMainButton({
        text: '–û—Ç–ø—Ä–∞–≤–∫–∞...',
        isVisible: true,
        isEnabled: false,
        isLoaderVisible: true,
      });
    } else {
      hideMainButton();
    }
  }, [selectedCharacter, isLoading, theme, setMainButton, hideMainButton]);

  /**
   * –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  const selectCharacter = useCallback(
    (character: Character) => {
      hapticFeedback('medium');
      setSelectedCharacter(character);
      console.log('‚úÖ Character selected:', character.name);
    },
    [hapticFeedback],
  );

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
   */
  const confirmSelection = useCallback(async () => {
    if (!selectedCharacter) {
      console.warn('‚ö†Ô∏è No character selected');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WebApp –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof window === 'undefined' || !window.Telegram?.WebApp) {
      console.error('‚ùå Telegram WebApp not available');
      await showAlert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram');
      return false;
    }

    setIsLoading(true);
    hapticFeedback('success');

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const dataToSend = {
        action: 'character_selected',
        character_id: selectedCharacter.id,
        character_name: selectedCharacter.name,
        character_emoji: selectedCharacter.emoji,
        character_personality: selectedCharacter.personality,
        character_description: selectedCharacter.description,
        user_id: user?.id,
        username: user?.username,
        first_name: user?.firstName,
        last_name: user?.lastName,
        language_code: user?.languageCode,
        timestamp: new Date().toISOString(),
      };

      console.log('üì§ Sending character selection to bot:', dataToSend);
      console.log('üë§ User data:', user);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram WebApp API
      const sent = sendData(dataToSend);

      if (sent) {
        console.log('‚úÖ Data sent successfully via Telegram WebApp API!');
        console.log('üì® Bot should receive web_app_data event with this data');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await showPopup({
          title: 'üéâ –£—Å–ø–µ—à–Ω–æ!',
          message: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selectedCharacter.name}. –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥!`,
          buttons: [
            { id: 'ok', type: 'ok', text: '–û—Ç–ª–∏—á–Ω–æ!' }
          ]
        });

        return true;
      } else {
        console.error('‚ùå Failed to send data');
        hapticFeedback('error');
        
        await showAlert(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n' +
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n' +
          '‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram\n' +
          '‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Menu Button –±–æ—Ç–∞'
        );
        
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error confirming selection:', error);
      
      hapticFeedback('error');
      await showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [selectedCharacter, user, sendData, hapticFeedback, showPopup, showAlert]);

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä
   */
  const resetSelection = useCallback(() => {
    setSelectedCharacter(null);
    hapticFeedback('light');
    console.log('üîÑ Selection reset');
  }, [hapticFeedback]);

  /**
   * –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
   */
  const toggleFavorite = useCallback(async (characterId: string) => {
    hapticFeedback('light');
    
    const isFavorite = favoriteCharacters.includes(characterId);
    const newFavorites = isFavorite
      ? favoriteCharacters.filter(id => id !== characterId)
      : [...favoriteCharacters, characterId];
    
    setFavoriteCharacters(newFavorites);
    await saveToCloudStorage('favorite_characters', JSON.stringify(newFavorites));
    
    console.log(isFavorite ? 'üíî Removed from favorites' : '‚ù§Ô∏è Added to favorites');
  }, [favoriteCharacters, hapticFeedback, saveToCloudStorage]);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
   */
  const isFavorite = useCallback((characterId: string): boolean => {
    return favoriteCharacters.includes(characterId);
  }, [favoriteCharacters]);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   */
  const getFavoriteCharacters = useCallback((characters: Character[]): Character[] => {
    return characters.filter(char => favoriteCharacters.includes(char.id));
  }, [favoriteCharacters]);

  return {
    selectedCharacter,
    isLoading,
    favoriteCharacters,
    selectCharacter,
    confirmSelection,
    resetSelection,
    toggleFavorite,
    isFavorite,
    getFavoriteCharacters,
  };
}
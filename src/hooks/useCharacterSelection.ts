// src/hooks/useCharacterSelection.ts
// –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è @tma.js/sdk-react v3.0.4

import { useState, useCallback, useEffect } from 'react';
import type { Character } from '@/types/character';
import { useTelegramWebApp } from './useTelegramWebApp';
import { sendToN8n } from '@/utils/sendToN8n';

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MainButton, Cloud Storage, —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
 */
export function useCharacterSelection() {
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [favoriteCharacters, setFavoriteCharacters] = useState<string[]>([]);
  
  const { 
    sendData, 
    hapticFeedback, 
    user,
    theme,
    setMainButton,
    hideMainButton,
    showPopup,
    showAlert,
    saveToCloudStorage,
    getFromCloudStorage,
  } = useTelegramWebApp();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ Cloud Storage
  useEffect(() => {
    const loadFavorites = async () => {
      try {
        const stored = await getFromCloudStorage('favorite_characters');
        if (stored) {
          const favorites = JSON.parse(stored);
          setFavoriteCharacters(favorites);
          console.log('‚úÖ Favorites loaded:', favorites);
        }
      } catch (error) {
        console.error('Error loading favorites:', error);
      }
    };
    loadFavorites();
  }, [getFromCloudStorage]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  useEffect(() => {
    if (selectedCharacter && !isLoading) {
      // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      const buttonColor = theme?.buttonColor || '#FF6B6B';
      const buttonTextColor = theme?.buttonTextColor || '#FFFFFF';

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      setMainButton({
        text: `–í—ã–±—Ä–∞—Ç—å ${selectedCharacter.name}`,
        isVisible: true,
        isEnabled: true,
        color: buttonColor,
        textColor: buttonTextColor,
        hasShineEffect: true,
        onClick: confirmSelection,
      });
    } else if (isLoading) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      setMainButton({
        text: '–û—Ç–ø—Ä–∞–≤–∫–∞...',
        isVisible: true,
        isEnabled: false,
        isLoaderVisible: true,
      });
    } else {
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
      hideMainButton();
    }

    // Cleanup - –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ö—É–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  }, [selectedCharacter, isLoading, theme, setMainButton, hideMainButton]);

  /**
   * –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  const selectCharacter = useCallback(
    (character: Character) => {
      // –°—Ä–µ–¥–Ω—è—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      hapticFeedback('medium');
      
      setSelectedCharacter(character);
      
      console.log('‚úÖ Character selected:', character.name);
    },
    [hapticFeedback],
  );

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   */
  const confirmSelection = useCallback(async () => {
    if (!selectedCharacter) {
      return false;
    }

    setIsLoading(true);
    
    // –£—Å–ø–µ—à–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    hapticFeedback('success');

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const dataToSend = {
        action: 'character_selected',
        character_id: selectedCharacter.id,
        character_name: selectedCharacter.name,
        character_emoji: selectedCharacter.emoji,
        character_personality: selectedCharacter.personality,
        character_description: selectedCharacter.description,
        user_id: user?.id,
        username: user?.username,
        first_name: user?.firstName,
        last_name: user?.lastName,
        language_code: user?.languageCode,
        timestamp: new Date().toISOString(),
        source: 'miniapp',
        version: '2.0',
      };

      console.log('üì§ Sending character selection:', dataToSend);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
      const n8nSuccess = await sendToN8n(dataToSend);

      if (n8nSuccess) {
        console.log('‚úÖ Character selection sent to n8n successfully!');
        
        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram WebApp API
        sendData(dataToSend);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await showPopup({
          title: 'üéâ –£—Å–ø–µ—à–Ω–æ!',
          message: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selectedCharacter.name}. –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥!`,
          buttons: [
            { id: 'ok', type: 'ok', text: '–û—Ç–ª–∏—á–Ω–æ!' }
          ]
        });

        return true;
      } else {
        console.error('‚ùå Failed to send to n8n');
        
        // –í–∏–±—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        hapticFeedback('error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error confirming selection:', error);
      
      hapticFeedback('error');
      await showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [selectedCharacter, user, sendData, hapticFeedback, showPopup, showAlert]);

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä
   */
  const resetSelection = useCallback(() => {
    setSelectedCharacter(null);
    hapticFeedback('light');
    console.log('üîÑ Selection reset');
  }, [hapticFeedback]);

  /**
   * –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
   */
  const toggleFavorite = useCallback(async (characterId: string) => {
    hapticFeedback('light');
    
    const isFavorite = favoriteCharacters.includes(characterId);
    const newFavorites = isFavorite
      ? favoriteCharacters.filter(id => id !== characterId)
      : [...favoriteCharacters, characterId];
    
    setFavoriteCharacters(newFavorites);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Cloud Storage
    await saveToCloudStorage('favorite_characters', JSON.stringify(newFavorites));
    
    console.log(isFavorite ? 'üíî Removed from favorites' : '‚ù§Ô∏è Added to favorites');
  }, [favoriteCharacters, hapticFeedback, saveToCloudStorage]);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
   */
  const isFavorite = useCallback((characterId: string): boolean => {
    return favoriteCharacters.includes(characterId);
  }, [favoriteCharacters]);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   */
  const getFavoriteCharacters = useCallback((characters: Character[]): Character[] => {
    return characters.filter(char => favoriteCharacters.includes(char.id));
  }, [favoriteCharacters]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    selectedCharacter,
    isLoading,
    favoriteCharacters,

    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    selectCharacter,
    confirmSelection,
    resetSelection,

    // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    toggleFavorite,
    isFavorite,
    getFavoriteCharacters,
  };
}